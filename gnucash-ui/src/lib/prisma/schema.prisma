//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  prismaJsonNullability = true
}

generator enums {
  provider = "ts-node --transpile-only ./src/lib/prisma/enum-generator"
}

generator fake_data {
  provider = "prisma-generator-fake-data"
  output   = "./fake-data.ts"
}

enum CommentableType {
  Todo
}

model Shelf {
  id        Int       @id() @default(autoincrement())
  /// @zod.max(12, { message: "Name must be shorter than 256 characters" })
  shortName String    @unique()
  luggages  Luggage[]
  partOf    Rack?     @relation(fields: [rackId], references: [id])
  rackId    Int
  comment   String

  @@map(name: "shelves")
}

model Rack {
  id        Int     @id() @default(autoincrement())
  /// @zod.max(255, { message: "Name must be shorter than 256 characters" })
  name      String
  /// @zod.max(12, { message: "shortNames are unique ids for identification and they should be shorter than 12 characters" })
  shortName String  @unique()
  type      String
  shelves   Shelf[]
  comment   String

  @@map(name: "racks")
}

model Luggage {
  id       Int     @id() @default(autoincrement())
  /// @zod.max(255, { message: "Name must be shorter than 256 characters" })
  name     String
  comment  String?
  /// @z.enum(["books", "suitcase", "cardboard-box","others"]);
  type     String
  length   Int?
  width    Int?
  height   Int?
  storedAt Shelf?  @relation(fields: [shelfId], references: [id])
  shelfId  Int

  @@map(name: "luggages")
}

model User {
  id              String           @id() @default(cuid())
  name            String?
  email           String           @unique()
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  countryId       Int?
  country         Country?         @relation(fields: [countryId], references: [id])
  Authenticator   Authenticator[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt()
  footprintId     Int?
  carbonFootprint CarbonFootprint? @relation(fields: [footprintId], references: [id])
  spaceid         Int?
  space           Space?
  comments        Comment[]
  spaceSharing    SpaceSharing[]

  @@map(name: "users")
}

model Space {
  id           Int            @id() @default(autoincrement())
  ownerId      String         @unique()
  user         User           @relation(fields: [ownerId], references: [id])
  todo         Todo[]
  spaceSharing SpaceSharing[]
}

model SpaceSharing {
  id      Int    @id() @default(autoincrement())
  spaceId Int
  space   Space  @relation(fields: [spaceId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])
}

model Account {
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt()
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map(name: "verification_tokens")
}

model Authenticator {
  credentialID         String  @unique()
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map(name: "authenticators")
}

model Country {
  id   Int    @id() @default(autoincrement())
  name String
  hdi  Float
  User User[]
}

model CarbonFootprint {
  id           Int                @id() @default(autoincrement())
  userId       String
  vehicles     EmissionVehicles[]
  User         User[]
  demographics Demographics?
  /// @z.enum(["metric", "standard"]);  
  unit         String
}

model Demographics {
  id              Int             @id() @default(autoincrement())
  footprintId     Int             @unique()
  country         String
  houseSize       Int
  householdIncome Int
  footprint       CarbonFootprint @relation(fields: [footprintId], references: [id])
}

model EmissionVehicles {
  id           Int             @id() @default(autoincrement())
  name         String?
  mileage      Float
  /// @zod.custom(z.coerce.number())
  milesPerYear Float
  /// @zod.custom(z.coerce.number())
  footprintId  Int
  /// @z.enum(["gasoline", "diesel", "electric"]);  
  fuelType     String
  footprint    CarbonFootprint @relation(fields: [footprintId], references: [id])
}

model Todo {
  id                       Int                 @id()
  /// @zod.max(255, { message: "Name must be shorter than 256 characters" }).min(3, {message: "Atleast 3 characters on the title are required"})
  title                    String
  descritpion              String
  statusMetaId             Int
  statusMeta               StatusMeta          @relation(fields: [statusMetaId], references: [id])
  spaceId                  Int
  space                    Space               @relation(fields: [spaceId], references: [id])
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt()
  StatusTransitions        StatusTransitions[]
  delegate_aux_commentable Commentable         @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Comment {
  id            Int         @id() @default(autoincrement())
  comment       String
  commentableId Int
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  comentable    Commentable @relation(fields: [commentableId], references: [id])
}

model StatusMeta {
  id       Int    @id() @default(autoincrement())
  statuses String
  Todo     Todo[]
}

model StatusTransitions {
  id        Int      @id() @default(autoincrement())
  taskId    Int
  task      Todo     @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    String
  comment   String
}

/// @@delegate(commentableType)
model Commentable {
  id                Int       @id() @default(autoincrement())
  Comment           Comment[]
  commentableType   String
  delegate_aux_todo Todo?
}
