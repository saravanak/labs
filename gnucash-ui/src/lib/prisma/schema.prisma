// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

generator enums {
  provider = "ts-node --transpile-only ./src/lib/prisma/enum-generator"
}

generator fake-data {
  provider = "prisma-generator-fake-data"
  output   = "./fake-data.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shelf {
  id Int @id @default(autoincrement())

  /// @zod.max(12, { message: "Name must be shorter than 256 characters" })
  shortName String @unique

  luggages Luggage[]
  partOf   Rack?     @relation(fields: [rackId], references: [id])

  rackId  Int
  comment String

  @@map(name: "shelves")
}

model Rack {
  id   Int    @id @default(autoincrement())
  /// @zod.max(255, { message: "Name must be shorter than 256 characters" })
  name String

  /// @zod.max(12, { message: "shortNames are unique ids for identification and they should be shorter than 12 characters" })
  shortName String @unique

  // @zod.enum(["cabinet", "loft", "steel-bero","open-shelf"])
  type String

  shelves Shelf[]

  comment String

  @@map(name: "racks")
}

model Luggage {
  id      Int     @id @default(autoincrement())
  /// @zod.max(255, { message: "Name must be shorter than 256 characters" })
  name    String
  comment String?

  /// @z.enum(["books", "suitcase", "cardboard-box","others"]);
  type String

  length   Int?
  width    Int?
  height   Int?
  storedAt Shelf? @relation(fields: [shelfId], references: [id])
  shelfId  Int

  @@map(name: "luggages")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  country       Country?        @relation(fields: [countryId], references: [id])
  countryId     Int?
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carbonFootprint CarbonFootprint? @relation(fields: [footprintId], references: [id])
  footprintId     Int?
  Todo            Todo[]

  @@map(name: "users")
}

model Account {
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map(name: "verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map(name: "authenticators")
}

model Country {
  id   Int    @id @default(autoincrement())
  name String
  hdi  Float
  User User[]
}

model CarbonFootprint {
  id           Int                @id @default(autoincrement())
  userId       String
  vehicles     EmissionVehicles[]
  User         User[]
  demographics Demographics?
  /// @z.enum(["metric", "standard"]);  
  unit         String
}

model Demographics {
  id Int @id @default(autoincrement())

  footprintId     Int    @unique
  country         String
  houseSize       Int
  householdIncome Int

  footprint CarbonFootprint @relation(fields: [footprintId], references: [id])
}

model EmissionVehicles {
  id   Int     @id @default(autoincrement())
  name String?

  mileage Float /// @zod.custom(z.coerce.number())

  milesPerYear Float /// @zod.custom(z.coerce.number())

  footprintId Int

  /// @z.enum(["gasoline", "diesel", "electric"]);  
  fuelType String

  footprint CarbonFootprint @relation(fields: [footprintId], references: [id])
}

model Todo {
  id Int @id @default(autoincrement())

  /// @zod.max(255, { message: "Name must be shorter than 256 characters" }).min(3, {message: "Atleast 3 characters on the title are required"})
  title String

  descritpion String

  statusMetaId Int

  statusMeta StatusMeta @relation(fields: [statusMetaId], references: [id])
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  StatusTransitions StatusTransitions[]
  Comment           Comment[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  comment String
  todoId  Int
  todo    Todo   @relation(fields: [todoId], references: [id])
}

model StatusMeta {
  id       Int    @id @default(autoincrement())
  statuses String
  Todo     Todo[]
}

model StatusTransitions {
  id        Int      @id @default(autoincrement())
  taskId    Int
  task      Todo     @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String
  comment   String
}

//\copy "Country"(name,hdi)  from 'src/app/ecowise/countries.csv' delimiter ',';
// alternative: https://github.com/chrishoermann/zod-prisma-types?tab=readme-ov-file#installation
// Shared todos; Reminders