//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  prismaJsonNullability = true
}

generator enums {
  provider = "ts-node --transpile-only ./src/lib/prisma/enum-generator"
}

generator fake_data {
  provider = "prisma-generator-fake-data"
  output   = "./fake-data.ts"
}

model Shelf {
  id        Int       @id() @default(autoincrement())
  /// @zod.max(12, { message: "Name must be shorter than 256 characters" })
  shortName String    @unique()
  luggages  Luggage[]
  partOf    Rack?     @relation(fields: [rackId], references: [id])
  rackId    Int
  comment   String

  @@map(name: "shelves")
}

model Rack {
  id        Int     @id() @default(autoincrement())
  /// @zod.max(255, { message: "Name must be shorter than 256 characters" })
  name      String
  /// @zod.max(12, { message: "shortNames are unique ids for identification and they should be shorter than 12 characters" })
  shortName String  @unique()
  type      String
  shelves   Shelf[]
  comment   String

  @@map(name: "racks")
}

model Luggage {
  id       Int     @id() @default(autoincrement())
  /// @zod.max(255, { message: "Name must be shorter than 256 characters" })
  name     String
  comment  String?
  /// @z.enum(["books", "suitcase", "cardboard-box","others"]);
  type     String
  length   Int?
  width    Int?
  height   Int?
  storedAt Shelf?  @relation(fields: [shelfId], references: [id])
  shelfId  Int

  @@map(name: "luggages")
}

model User {
  id              String           @id() @default(cuid())
  name            String?
  email           String           @unique()
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  country_id      Int?
  country         Country?         @relation(fields: [country_id], references: [id])
  Authenticator   Authenticator[]
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt()
  footprint_id    Int?
  carbonFootprint CarbonFootprint? @relation(fields: [footprint_id], references: [id])
  space_id        Int?
  space           Space?
  api_key         String?
  comments        Comment[]
  spaceSharing    SpaceSharing[]

  @@map(name: "users")
}

model Space {
  id           Int            @id() @default(autoincrement())
  owner_id     String         @unique()
  name         String
  user         User           @relation(fields: [owner_id], references: [id])
  todos        Todo[]
  spaceSharing SpaceSharing[]

  @@map(name: "spaces")
}

model SpaceSharing {
  id       Int    @id() @default(autoincrement())
  space_id Int
  space    Space  @relation(fields: [space_id], references: [id])
  user_id  String
  user     User   @relation(fields: [user_id], references: [id])

  @@map(name: "user_space")
}

model Account {
  user_id                  String
  type                     String
  provider                 String
  provider_account_id      String
  refresh_token            String?
  refresh_token_expires_in Int
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt()
  user                     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([provider, provider_account_id])
  @@map(name: "accounts")
}

model Session {
  sessionToken String   @unique()
  user_id      String
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt()

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map(name: "verification_tokens")
}

model Authenticator {
  credentialID         String  @unique()
  user_id              String
  provider_account_id  String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, credentialID])
  @@map(name: "authenticators")
}

model Country {
  id   Int    @id() @default(autoincrement())
  name String
  hdi  Float
  User User[]

  @@map(name: "countries")
}

model CarbonFootprint {
  id           Int                @id() @default(autoincrement())
  user_id      String
  vehicles     EmissionVehicles[]
  User         User[]
  demographics Demographics?
  /// @z.enum(["metric", "standard"]);  
  unit         String

  @@map(name: "carbon_fps")
}

model Demographics {
  id              Int             @id() @default(autoincrement())
  footprint_id    Int             @unique()
  country         String
  houseSize       Int
  householdIncome Int
  footprint       CarbonFootprint @relation(fields: [footprint_id], references: [id])

  @@map(name: "demographics")
}

model EmissionVehicles {
  id           Int             @id() @default(autoincrement())
  name         String?
  mileage      Float
  /// @zod.custom(z.coerce.number())
  milesPerYear Float
  /// @zod.custom(z.coerce.number())
  footprint_id Int
  /// @z.enum(["gasoline", "diesel", "electric"]);  
  fuelType     String
  footprint    CarbonFootprint @relation(fields: [footprint_id], references: [id])

  @@map(name: "emissions_vehicles")
}

model Todo {
  /// @zod.max(255, { message: "Name must be shorter than 256 characters" }).min(3, {message: "Atleast 3 characters on the title are required"})
  id                Int                 @id() @default(autoincrement())
  title             String
  description       String
  statusMetaId      Int
  statusMeta        StatusMeta          @relation(fields: [statusMetaId], references: [id])
  space_id          Int
  space             Space               @relation(fields: [space_id], references: [id])
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt()
  StatusTransitions StatusTransitions[]

  @@map(name: "todos")
}

model Comment {
  id          Int          @id() @default(autoincrement())
  user_id     String
  user        User         @relation(fields: [user_id], references: [id])
  commentable Commentable?
  comment     String
  created_at  DateTime     @default(now())

  @@map(name: "comments")
}

model StatusMeta {
  id       Int    @id() @default(autoincrement())
  statuses String
  Todo     Todo[]

  @@map(name: "status_meta")
}

model StatusTransitions {
  id         Int      @id() @default(autoincrement())
  todo_id    Int
  todo       Todo     @relation(fields: [todo_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
  status     String
  comment    String

  @@map(name: "status_transitions")
}

model Commentable {
  id             Int     @id() @default(autoincrement())
  commentee_type String
  commentee_id   Int
  comment_id     Int     @unique()
  comment        Comment @relation(fields: [comment_id], references: [id])

  @@map(name: "commentables")
}
