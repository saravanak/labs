// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                 = "zod-prisma"
  output                   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel            = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

generator enums {
  provider = "ts-node --transpile-only ./src/lib/prisma/enum-generator"
}

generator fake-data {
    provider = "prisma-generator-fake-data"
    output   = "./fake-data.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shelf {
  id Int @id @default(autoincrement())

  /// @zod.max(12, { message: "Name must be shorter than 256 characters" })
  shortName String @unique
  
  luggages Luggage[]  
  partOf Rack? @relation(fields:[rackId], references:[id])

  rackId Int 
  comment String
  
  @@map(name: "shelves")

}

model Rack {
  id Int @id @default(autoincrement())
  /// @zod.max(255, { message: "Name must be shorter than 256 characters" })
  name String 

  /// @zod.max(12, { message: "shortNames are unique ids for identification and they should be shorter than 12 characters" })
  shortName String @unique

  // @zod.enum(["cabinet", "loft", "steel-bero","open-shelf"])
  type String 

  shelves Shelf[]
  
  comment String
  @@map(name: "racks")
}

model Luggage {
  id Int @id @default(autoincrement())
  /// @zod.max(255, { message: "Name must be shorter than 256 characters" })
  name String
  comment String?

  /// @z.enum(["books", "suitcase", "cardboard-box","others"]);
  type String

  length Int? 
  width Int? 
  height Int? 
  storedAt Shelf? @relation(fields:[shelfId], references:[id])
  shelfId Int

  @@map(name: "luggages")
}

